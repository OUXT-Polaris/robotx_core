#!/usr/bin/env python
PACKAGE = "robotx_driver"

from dynamic_reconfigure.parameter_generator_catkin import *
import math

gen = ParameterGenerator()

#gen.add("base_footprint_x", double_t, 0, "base_link to base_footprint in x axis (m)", 0, -5, 5)
#gen.add("base_footprint_y", double_t, 0, "base_link to base_footprint in y axis (m)", 0, -5, 5)
#gen.add("base_footprint_z", double_t, 0, "base_link to base_footprint in z axis (m)", 0, -2, 2)
#gen.add("base_footprint_roll", double_t, 0, "base_link to base_footprint in roll axis (rad/pi)", 0, -1, 1)
#gen.add("base_footprint_pitch", double_t, 0, "base_link to base_footprint in pitch axis (rad/pi)", 0, -1, 1)
#gen.add("base_footprint_yaw", double_t, 0, "base_link to base_footprint in yaw axis (rad/pi)", 0, -1, 1)

gen.add("ai_pilot_x", double_t, 0, "base_link to ai_pilot in x axis (m)", 0, -5, 5)
gen.add("ai_pilot_y", double_t, 0, "base_link to ai_pilot in y axis (m)", 0, -5, 5)
gen.add("ai_pilot_z", double_t, 0, "base_link to ai_pilot in z axis (m)", 0, -2, 2)
gen.add("ai_pilot_roll", double_t, 0, "base_link to ai_pilot in roll axis (rad/pi)", 0, -1, 1)
gen.add("ai_pilot_pitch", double_t, 0, "base_link to ai_pilot in pitch axis (rad/pi)", 0, -1, 1)
gen.add("ai_pilot_yaw", double_t, 0, "base_link to ai_pilot in yaw axis (rad/pi)", 0, -1, 1)

gen.add("front_velodyne_x", double_t, 0, "base_link to front_velodyne in x axis (m)", 0, -5, 5)
gen.add("front_velodyne_y", double_t, 0, "base_link to front_velodyne in y axis (m)", 0, -5, 5)
gen.add("front_velodyne_z", double_t, 0, "base_link to front_velodyne in z axis (m)", 0, -2, 2)
gen.add("front_velodyne_roll", double_t, 0, "base_link to front_velodyne in roll axis (rad/pi)", 0, -1, 1)
gen.add("front_velodyne_pitch", double_t, 0, "base_link to front_velodyne in pitch axis (rad/pi)", 0, -1, 1)
gen.add("front_velodyne_yaw", double_t, 0, "base_link to front_velodyne in yaw axis (rad/pi)", 0, -1, 1)

gen.add("front_camera_x", double_t, 0, "base_link to front_camera in x axis (m)", 0, -5, 5)
gen.add("front_camera_y", double_t, 0, "base_link to front_camera in y axis (m)", 0, -5, 5)
gen.add("front_camera_z", double_t, 0, "base_link to front_camera in z axis (m)", 0, -2, 2)
gen.add("front_camera_roll", double_t, 0, "base_link to front_camera in roll axis (rad/pi)", 0, -1, 1)
gen.add("front_camera_pitch", double_t, 0, "base_link to front_camera in pitch axis (rad/pi)", 0, -1, 1)
gen.add("front_camera_yaw", double_t, 0, "base_link to front_camera in yaw axis (rad/pi)", 0, -1, 1)

gen.add("gps_x", double_t, 0, "base_link to gps in x axis (m)", 0, -5, 5)
gen.add("gps_y", double_t, 0, "base_link to gps in y axis (m)", 0, -5, 5)
gen.add("gps_z", double_t, 0, "base_link to gps in z axis (m)", 0, -2, 2)
gen.add("gps_roll", double_t, 0, "base_link to gps in roll axis (rad/pi)", 0, -1, 1)
gen.add("gps_pitch", double_t, 0, "base_link to gps in pitch axis (rad/pi)", 0, -1, 1)
gen.add("gps_yaw", double_t, 0, "base_link to gps in yaw axis (rad/pi)", 0, -1, 1)

gen.add("imu_x", double_t, 0, "base_link to imu in x axis (m)", 0, -5, 5)
gen.add("imu_y", double_t, 0, "base_link to imu in y axis (m)", 0, -5, 5)
gen.add("imu_z", double_t, 0, "base_link to imu in z axis (m)", 0, -2, 2)
gen.add("imu_roll", double_t, 0, "base_link to imu in roll axis (rad/pi)", 0, -1, 1)
gen.add("imu_pitch", double_t, 0, "base_link to imu in pitch axis (rad/pi)", 0, -1, 1)
gen.add("imu_yaw", double_t, 0, "base_link to imu in yaw axis (rad/pi)", 0, -1, 1)

exit(gen.generate(PACKAGE, "robotx_driver", "frame_publisher"))